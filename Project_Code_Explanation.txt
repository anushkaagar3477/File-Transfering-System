Project Code Explanation
========================

This file will contain a line-by-line, in-depth explanation of every line of code in your project, including all Java source files, FXML, and CSS. The explanations will be clear, beginner-friendly, and cover the purpose, logic, and flow of each line.

---

(Explanations for each file will be added here, one by one, in the following order:)

1. src/main/java/com/filetransfer/FileTransferApp.java
2. src/main/java/com/filetransfer/DatabaseUtil.java
3. src/main/java/com/filetransfer/LoginController.java
4. src/main/java/com/filetransfer/SignupController.java
5. src/main/java/com/filetransfer/FileTransferController.java
6. src/main/java/com/filetransfer/GamesController.java
7. src/main/resources/fxml/login.fxml
8. src/main/resources/fxml/signup.fxml
9. src/main/resources/fxml/filetransfer.fxml
10. src/main/resources/fxml/games.fxml
11. src/main/resources/styles/main.css
12. pom.xml
13. run.bat

---

1. src/main/java/com/filetransfer/FileTransferApp.java

```
package com.filetransfer;
```
This line declares the package for this Java file. It means this file is part of the `com.filetransfer` package, which helps organize code and avoid naming conflicts.

```
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;
import java.io.IOException;
```
These lines import necessary JavaFX and Java classes:
- `Application`: The base class for JavaFX applications.
- `FXMLLoader`: Loads FXML files (UI layouts).
- `Parent`, `Scene`, `Stage`: JavaFX classes for building the UI window.
- `IOException`: Handles input/output exceptions.

```
public class FileTransferApp extends Application {
```
Defines the main application class, which extends `Application` (required for JavaFX apps).

```
    private double xOffset = 0;
    private double yOffset = 0;
    private Stage primaryStage;
```
Declares variables:
- `xOffset`, `yOffset`: (Unused in this code, could be for window dragging.)
- `primaryStage`: The main window of the application.

```
    @Override
    public void init() {
        // Initialize database when application starts
        DatabaseUtil.initializeDatabase();
    }
```
The `init()` method runs before the UI starts. Here, it calls `DatabaseUtil.initializeDatabase()` to set up the database tables if needed.

```
    @Override
    public void start(Stage primaryStage) throws IOException {
        this.primaryStage = primaryStage;
        showLoginScene();
        primaryStage.show();
    }
```
The `start()` method is the entry point for JavaFX apps. It:
- Stores the main window (`primaryStage`).
- Calls `showLoginScene()` to display the login UI.
- Shows the window.

```
    public void showLoginScene() throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/login.fxml"));
        Scene scene = new Scene(loader.load());
        scene.getStylesheets().add(getClass().getResource("/styles/main.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.setTitle("Login");
    }
```
This method loads and displays the login screen:
- Loads the FXML layout for login.
- Applies the CSS stylesheet.
- Sets the scene and window title.

```
    public void showSignupScene() throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/signup.fxml"));
        Scene scene = new Scene(loader.load());
        scene.getStylesheets().add(getClass().getResource("/styles/main.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.setTitle("Sign Up");
    }
```
Similar to above, but for the signup screen.

```
    public void showFileTransferScene() throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/filetransfer.fxml"));
        Scene scene = new Scene(loader.load());
        scene.getStylesheets().add(getClass().getResource("/styles/main.css").toExternalForm());
        primaryStage.setScene(scene);
        primaryStage.setTitle("File Transfer");
        // Set a smaller default size for the file transfer window
        primaryStage.setWidth(600);
        primaryStage.setHeight(400);
    }
```
Loads and displays the main file transfer UI, sets the window size and title.

```
    public static void main(String[] args) {
        launch(args);
    }
```
The main method launches the JavaFX application.

```
}
```
End of the class.

---

(Each file's explanation will be added in the next steps.) 